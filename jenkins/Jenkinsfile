pipeline {
    agent any
    stages {
        stage('Build') {
            agent {
                docker {
                    image 'python:2-alpine'
                }
            }
            steps {
                sh 'python -m py_compile sources/add2vals.py sources/calc.py'
            }
        }
        stage('Test') {
            agent {
                docker {
                    image 'python:3.8'
                }
            }
            steps {
//                 sh 'py.test --verbose --junit-xml test-reports/results.xml sources/test_calc.py'
                sh '''
                    python -m venv .venv
                    . .venv/bin/activate
                    pip install pytest
                    pip install allure-pytest
                    pytest sources/test_calc.py --alluredir=./my_allure_results
                '''
//                 sh 'sudo -H pip install allure-pytest'
//                 sh 'pytest sources/test_calc.py --alluredir=./my_allure_results'
            }
            post {
                always {
                    junit 'test-reports/results.xml'
                }
            }
        }
//         stage('Deliver') {
//             agent {
//                 docker {
//                     image 'cdrx/pyinstaller-linux:python2'
//                 }
//             }
//             steps {
//                 sh 'pyinstaller --onefile sources/add2vals.py'
//             }
//             post {
//                 success {
//                     archiveArtifacts 'dist/add2vals'
//                 }
//             }
//         }
    }
    post { 
        always { 
            
                script {
                        allure([
                                includeProperties: false,
                                jdk: '',
                                properties: [],
                                reportBuildPolicy: 'ALWAYS',
                                results: [[path: './my_allure_results']]
                        ])
                    }
                
        }
    }
}
